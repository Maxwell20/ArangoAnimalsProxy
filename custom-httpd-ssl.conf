#
# This is the Apache server configuration file providing SSL support.
# For detailed information see <URL:http://httpd.apache.org/docs/2.4/mod/mod_ssl.html>
# 
# Required modules: mod_log_config, mod_setenvif, mod_ssl,
#          socache_shmcb_module (for default value of SSLSessionCache)



#  bind Apache to standard SSL/HTTPS port 443  
Listen 443

# Settings recommendation security
#SSLCompression off

# List the ciphers that the client is permitted to negotiate
SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+ED
SSLProxyCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+ED
# Enforce the server's cipher order.
SSLHonorCipherOrder on 

#   List the protocol versions which clients are allowed to connect with.
SSLProtocol all -SSLv2 -SSLv3 -TLSv1
SSLProxyProtocol all -SSLv2 -SSLv3 -TLSv1

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is an internal
#   terminal dialog) has to provide the pass phrase on stdout.
SSLPassPhraseDialog  builtin

#   Inter-Process SSL Session Cache First the mechanism use and expiring timeout (in seconds).
#SSLSessionCache         "dbm:/usr/local/apache2/logs/ssl_scache"
SSLSessionCache        "shmcb:/usr/local/apache2/logs/ssl_scache(512000)"
SSLSessionCacheTimeout  300


##
## SSL Virtual Host Context
##
<VirtualHost _default_:443>
    #   General setup for the virtual host
    ServerName localhostdomain.com
    ServerAlias www.localhostdomain.com
    ErrorLog /proc/self/fd/2
    TransferLog /proc/self/fd/1

    # SSL Engine Switch: Enable/Disable SSL for this virtual host.
    SSLEngine on

    SSLProxyEngine on
    
    # Server Certificate: PEM encoded certificate. 
    SSLCertificateFile "/usr/local/apache2/conf/server.cer"
    #   Server Private Key: 
    SSLCertificateKeyFile "/usr/local/apache2/conf/server.key"
    # Server Cert Chain: Concatenation of PEM encoded certificate chain for the server certificate. 
    SSLCertificateChainFile "/usr/local/apache2/conf/ca.cer"
    # Certificate Authority (CA): huge file containing CA certs for client authentication must be PEM encodedone    
    SSLCACertificateFile "/usr/local/apache2/conf/ca.cer"

    # Certificate Revocation Lists (CRL):
    #   CA CRLs for client authentication one huge file containing all (file must be PEM encoded).
    #   The CRL checking mode needs to be configured explicitly
    #   through SSLCARevocationCheck (defaults to "none" otherwise).
    #   Note: Inside SSLCARevocationPath you need hash symlinks
    #         to point to the certificate files. Use the provided
    #         Makefile to update the hash symlinks after changes.
    #SSLCARevocationPath "/usr/local/apache2/conf/ssl.crl"
    #SSLCARevocationFile "/usr/local/apache2/conf/ssl.crl/ca-bundle.crl"
    #SSLCARevocationCheck chain

    # Client Authentication certificate verification type and depth.  
    # Types are none, optional, require and optional_no_ca.  
    # Depth number specifies how deeply to verify the certificate chain before deciding the certificate is not valid.
    SSLVerifyClient require
    SSLVerifyDepth  10
 
    #   SSL Engine Options:
    #   o ExportCertData: This exports two environment variables: SSL_CLIENT_CERT and
    #     SSL_SERVER_CERT. Contains PEM-encoded certificate
    #   o StdEnvVars: This exports the standard SSL/TLS related `SSL_*' environment variables.
    #   o StrictRequire: This denies access when "SSLRequireSSL" or "SSLRequire" 
    SSLOptions +ExportCertData +StrictRequire +StdEnvVars


    RequestHeader set SSL_CLIENT_CN "%{SSL_CLIENT_S_DN_CN}s"
    RequestHeader set X-Forwarded-Proto expr=%{REQUEST_SCHEME}
    RequestHeader set X-Forwarded-SSL expr=%{HTTPS}
   
    # ProxyRequests is off 
    # because It is not necessary to turn ProxyRequests on in order to configure a reverse proxy. 
    # and mainly this : 
    # The forward proxy is activated using the ProxyRequests directive. 
    # Because forward proxies !!! allow clients to access arbitrary sites through your server !!!
    # and to hide their true origin, it is essential that you !!! secure your server so that !!! only authorized clients
    # can access the proxy before activating a forward proxy
    ProxyRequests     off
    
    ProxyPreserveHost on
    
    #
    # A reverse proxy (or gateway), by contrast, appears to the client just like an ordinary web server. 
    # No special configuration on the client is necessary. The client makes ordinary requests for content in the 
    # namespace of the reverse proxy. 
    # The reverse proxy then decides where to send those requests and returns the content as if it were itself the origin.
    # 
    # A reverse proxy is activated using the !!! ProxyPass directive or !!!! the [P] flag to the RewriteRule directive
    #
    
    # no proxy for /error/ (Apache HTTPd errors messages)
    ProxyPass /error/ !
    
    # pass client request that match path to url backend
    #ProxyPass        / http://url:3030/ 
    # change response URL in the Location, Content-Location and URI headers to make it look like it came for the 
    # proxy. 
    #ProxyPassReverse / http://url:3030/
   
    ProxyPass        /_db http://exo-arangodb:8529/_db  
    ProxyPassReverse /_db http://exo-arangodb:8529/_db

    ProxyPass        /rest http://exo-fast-api:8080/rest 
    ProxyPassReverse /rest http://exo-fast-api:8080/rest
       
    <Location /rest>
      RewriteEngine on
      RewriteCond %{HTTPS:Upgrade} websocket [NC]
      RewriteCond %{HTTPS:Connection} upgrade [NC]
      RewriteRule ^/?(.*) "wss://exo-fast-api:8043/$1" [P,L]

    #   Access Control: With SSLRequire you can do per-loction access control.  
    #   SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
    #            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
    #            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
    #            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
    #            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
    #           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/

      Require all granted
    </Location>

    ProxyPass        /map http://exo-gui-map:8180/map 
    ProxyPassReverse /map http://exo-gui-map:8180/map
 
    <Location /map>
      RewriteEngine on
      RewriteCond %{HTTP:Upgrade} websocket [NC]
      RewriteCond %{HTTP:Connection} upgrade [NC]
      RewriteRule ^/?(.*) "ws://exo-gui-map:8180/$1" [P,L]
      
      Require all granted
    </Location>

    ProxyPass        / http://exo-gui:8280/ 
    ProxyPassReverse / http://exo-gui:8280/
    
    <Location />
      RewriteEngine on
      RewriteCond %{HTTP:Upgrade} websocket [NC]
      RewriteCond %{HTTP:Connection} upgrade [NC]
      RewriteRule ^/?(.*) "ws://exo-gui:8280/$1" [P,L]
      
      Require all granted
    </Location>


    LogLevel notice
    <IfModule log_config_module>
        # The directives define format nicknames(combined and common) for CustomLog directive 
    
        LogFormat " %h %l %u %t \"%r\" %>s %b \"%{SSL_CLIENT_S_DN}i\" " common
        
        # The location and format of the access logfile (Common Logfile Format).
        # if define in <VirtualHost> access logfiles, transactions will be logged there and not here.
        CustomLog /proc/self/fd/1 common
        # If you prefer a logfile with access, agent, and referer information use (Combined Logfile Format) 
        #CustomLog "logs/access_log" combined
    </IfModule>

 

    #   SSL Protocol Adjustments: For problems of broken clients 
    #   "force-response-1.0" for this.
    BrowserMatch "MSIE [2-5]" \
            nokeepalive ssl-unclean-shutdown \
            downgrade-1.0 force-response-1.0

    #   Per-Server Logging:
    #   The home of a custom SSL log file. Use this when you want a
    #   compact non-error SSL logfile on a virtual host basis.
    CustomLog /proc/self/fd/1 \
            "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>                                  
